LIN = hou.rampBasis.Linear

RAMPS = {'heatmap': hou.Ramp((LIN,LIN,LIN,LIN,LIN), (0, 0.27, 0.718, 0.9, 1.0), ((0.036, 0, 0.543), (0.737, 0, 0), (1, 0.28, 0), (0.9, 0.9, 0), (1, 1, 1))),
         'blackbody': hou.Ramp((LIN,LIN,LIN,LIN), (0, 0.333, 0.666, 1.0), ((0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1))),
         'infrared': hou.Ramp((LIN,LIN,LIN,LIN,LIN), (0, 0.25, 0.5, 0.75, 1.0), ((0.2, 0, 1), (0, 0.85, 1), (0, 1, 0.1), (0.95, 1, 0), (1, 0, 0))),
        }
  
def ramp_preset_callback(kwargs):
    node = kwargs['node']
    parm = kwargs['parm']
    preset = parm.eval()
    presetName = parm.menuItems()[preset]
    ramp_parm = node.parm('falloff_heatmap')
    ramp_parm.set(RAMPS[presetName])
    
    
def disableUpstreamPreviews(kwargs):
    # disable upstream falloffs if we just turned this one on
    parm = kwargs['parm']
    # if this is inside an HDA, it'll be referenced to another parm...
    parm = parm.getReferencedParm()
    node = parm.node()
    ancestors = node.inputAncestors()
    if ancestors:
        for a in ancestors:
            if a.type().name().startswith("MOPS::"):
                p = a.parm('do_preview')
                if p is not None:
                    # get the parm driver if one exists.
                    # if there's no driver, this returns the same parm.
                    # this will throw a PermissionError if the upstream node
                    # is inside a locked HDA...
                    r = p.getReferencedParm()
                    try:
                        r.set(0)
                    except:
                        pass