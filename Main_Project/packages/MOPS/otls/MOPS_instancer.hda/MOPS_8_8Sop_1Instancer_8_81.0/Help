= MOPs Cloner =

#icon: opdef:.?mops_cloner_03.svg

"""Copies the input objects to various patterns, or onto a curve or mesh."""

The MOPs Cloner generates MOPs packed primitives and distributes them in various ways. Each distribution type has its own set of parameters.
Any number of objects can be input into the Cloner; the Index Attribute and Indexing Mode parameters determine which of the input objects is copied to each point.
The objects that are generated are standard Houdini Packed Primitives, with a few extra attributes added for use with the rest of the MOPs system. 

== Overview ==

@inputs

Objects To Clone:
    Connect any number of input objects. The order of inputs determines which object is cloned to which Index Attribute value.
    
@parameters

== General ==

Number of Points:
    #id: npoints
    
    The number of clones to generate. If "Flood Mesh" is enabled, this parameter may be overridden by the number of points on the Input Mesh.
    
Distribution Type:
    #id: distro_type
    
    The distribution method to use for positioning and orienting objects. There are several modes available:
    
    * Linear: Arrange the clones in a straight line.
    * Radial: Arrange the clones in a circle or spiral pattern.
    * Spherical: Arrange the clones in a spherical pattern.
    * Grid: Arrange the clones in a 2D grid or 3D matrix pattern.
    * Mesh: Arrange the clones using a mesh.
    * Curve: Arrange the clones along a NURBS or polyline curve.
    
== Linear == 

Distance:
    #id: linear_distance
    
    The total length of the line to copy objects along.
    
Offset: 
    #id: linear_offset
    
    Apply an offset transformation to the clones along the line, like a marquee.
    
== Radial ==

Orientation:
    #id: radial_orient
    
    The orientation of the circle to clone on.
    
Arc Angles:
    #id: beginradial_rangle endradial_angle
    
    The starting and ending angles of an open arc.
    
Radius:
    #id: radial_radiusx radial_radiusy
    
    The u and v radius of the circle or ellipse.
    
Uniform Scale:
    #id: radial_scale
    
    A scalar on the radius of the circle.
    
Distance:
    #id: radial_distance
    
    The distance to separate the start and end of the arc, normal to the orientation plane.
    
Divisions:
    #id: radial_divisions
    
    The number of points along the arc. Higher numbers make smoother arcs.
    
Align:
    #id: radial_align
    
    Align copies to the arc.
    
== Spherical ==

Anglex:
    #id: sphere_angleX
    
    The maximum polar value for θ (theta) in a spherical coordinate system.
      
Angley:
    #id: sphere_angleY
    
    The maximum azimuth value for φ (phi) in a spherical coordinate system.
    
Radius:
    #id: sphere_radius
    
    The radius of the sphere.
    
Anim Speed:
    #id: sphere_anim_speed
    
    The rate at which clones will animate along the surface of the sphere.
    
Anim Amount:
    #id: sphere_anim_amount
    
    The amount by which clones will animate along the surface of the sphere. A value of 1.0 implies a full circumnavigation.
    
Seed:
    #id: sphere_seed
    
    The random seed used for distributing spherical clones.
    
Align:
    #id: sphere_align
    
    Align clones to the surface of the sphere.
    
== Grid ==

Grid X, Grid Y, Grid Z:
    #id: gridx gridy gridz
    
    The number of clones to generate along each axis.
    
Distance:
    #id: grid_distancex grid_distancey grid_distancez
    
    The total length of each axis.
   
== Mesh ==

Input Mesh:
    #id: inputMesh
    
    The mesh to copy clones to. This can be any unpacked SOP.
    
Convert to Polygons:
    #id: do_convert_to_polygons
    
    Convert the input mesh to polygons before cloning.
    
Mesh Distribution Method:
    #id: mesh_distroMethod
    
    The method by which to distribute clones onto the Input Mesh. There are several options:
    
    * Scatter: Scatter clones randomly across the input mesh.
    * Points: Place one clone at each point of the input mesh.
    * Prim Centers: Place one clone at the centroid of each primitive (face) of the input mesh.
    * Voxels: Convert the input mesh into a fog volume, and place one clone at the center of each voxel.
    * Edge Centers: Place one clone at the relative center of each edge of the input mesh.
    
    === Scatter ===
    
    Scatter Seed:
        #id: seed
        
        The random seed to use for scatter points on the Input Mesh.
        
    Relax Iterations:
        #id: relaxiterations
        
        See the Scatter SOP for details.
        
    Scale Radii By:
        #id: scaleradiiby
        
        See the Scatter SOP for details.
        
    === Voxels ===
    
    Voxel Size:
        #id: mesh_voxelsize
        
        The size of the voxel grid to create from the Input Mesh. A clone will be placed at each voxel's center.
        
Flood Mesh:
    #id: floodMesh
    
    When using distribution methods other than Scatter, this option always creates enough clones to fill the source points.
    
Push Along Normal:
    #id: mesh_peak_dist
    
    Push the clones outwards along the surface normals of the Input Mesh.
    
=== Alignment ===

Orient Copies to Surface:
    #id: do_mesh_orient
    
    Align the copies to the surface of the Input Mesh.
 
Cusp Faces:
    #id mesh_scatter_do_cusp_faces
    
    Split the faces of the Input Mesh apart so that their surface normals are hardened. This makes clones align strictly to the faces they are scattered onto, rather than smoothly blending their orientation with neighboring faces.
        
Compute Normal:
    #id: do_compute_normal
    
    Automatically compute the surface normals from the Input Mesh.
    
Up Vector:
    #id: up_vector
    
    The up vector used along with the surface normals to orient each clone.
    
== Transform ==

Rotate:
    #id: rotate
    
    The number of degrees along each axis to rotate each copy.
    
Scale:
    #id: scale
    
    The scale of each copy.
    
== Indexing ==

Indexing Mode:
    #id: index_mode
    
    The method by which Indexes are generated, to determine which input object is copied to each point. This creates the i@mops_index attribute.
    
    * Random: Randomly determine the i@mops_index attribute.
    * Ordered: Loop through each index in order of point generation.
    * Point Attribute: Use a point attribute from the Input Mesh to determine the i@mops_index attribute.
    
Index Random Seed:
    #id: index_seed
    
    When using the Random Indexing Mode, the random seed used to determine i@mops_index.
    
Index Attribute:
    #id: index_attr
    
    When using the Input Mesh distribution method, you can provide an integer point attribute from the Input Mesh that will be used to create i@mops_index. Hint: You can use a MOPs Index From Attribute SOP to create this attribute on your Input Mesh.
    
Index Point Search Distance
    #id: index_max_dist
    
    Some mesh distribution methods (such as Edge Centers) can change the input geometry, and the new points need to look for the nearest point from the original mesh to determine the original value of the index attribute. This is the maximum distance to search for the original points.
    
@related

* [MOPs Index From Attribute|Node:sop/MOPS--indexFromAttribute-1.0]
* [MOPs Falloff From Attribute|Node:sop/MOPS--Falloff_From_Attribute-1.0]
* [MOPs Apply Attributes|Node:sop/MOPS--applyAttributes-1.0]
* [MOPs Extract Attributes|Node:sop/MOPS--extractAttributes-1.0]